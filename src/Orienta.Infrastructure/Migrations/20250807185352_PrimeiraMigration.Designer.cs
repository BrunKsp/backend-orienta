// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Orienta.Infrastructure.Persistence;

#nullable disable

namespace Orienta.Infrastructure.Migrations
{
    [DbContext(typeof(OrientaDbContext))]
    [Migration("20250807185352_PrimeiraMigration")]
    partial class PrimeiraMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("orienta")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Orienta.Domain.Entities.AlternativaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Correta")
                        .HasColumnType("boolean")
                        .HasColumnName("correta");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("uuid")
                        .HasColumnName("pergunta_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("texto");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.HasIndex("Slug");

                    b.ToTable("alternativas", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.PerguntaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("enunciado");

                    b.Property<Guid>("QuestionarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("questionario_id");

                    b.Property<string>("RespostaEsperada")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("resposta_esperada");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("QuestionarioId");

                    b.HasIndex("Slug");

                    b.ToTable("perguntas", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.QuestionarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CriadoPor")
                        .HasColumnType("integer")
                        .HasColumnName("criado_por");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<string>("ProfessorSlug")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("professor_slug");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("questionario", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.RespostaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("aluno_id");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("QuestionarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("questioario_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("QuestionarioId");

                    b.HasIndex("Slug");

                    b.ToTable("respostas", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.RespostaPerguntaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("uuid")
                        .HasColumnName("pergunta_id");

                    b.Property<string>("RespostaAluno")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("resposta_aluno");

                    b.Property<Guid>("RespostaId")
                        .HasColumnType("uuid")
                        .HasColumnName("resposta_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.HasIndex("RespostaId");

                    b.HasIndex("Slug");

                    b.ToTable("respostas_perguntas", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.UsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Foto")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("foto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("senha");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_usuario");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("usuarios", "orienta");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Orienta.Domain.Entities.AlunoEntity", b =>
                {
                    b.HasBaseType("Orienta.Domain.Entities.UsuarioEntity");

                    b.ToTable("alunos", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.ProfessorEntity", b =>
                {
                    b.HasBaseType("Orienta.Domain.Entities.UsuarioEntity");

                    b.ToTable("professores", "orienta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.AlternativaEntity", b =>
                {
                    b.HasOne("Orienta.Domain.Entities.PerguntaEntity", "Pergunta")
                        .WithMany("Alternativas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.PerguntaEntity", b =>
                {
                    b.HasOne("Orienta.Domain.Entities.QuestionarioEntity", null)
                        .WithMany("Perguntas")
                        .HasForeignKey("QuestionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Orienta.Domain.Entities.RespostaEntity", b =>
                {
                    b.HasOne("Orienta.Domain.Entities.AlunoEntity", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orienta.Domain.Entities.QuestionarioEntity", "Questionario")
                        .WithMany()
                        .HasForeignKey("QuestionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Questionario");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.RespostaPerguntaEntity", b =>
                {
                    b.HasOne("Orienta.Domain.Entities.PerguntaEntity", "Pergunta")
                        .WithMany()
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Orienta.Domain.Entities.RespostaEntity", "Resposta")
                        .WithMany("RespostasPerguntas")
                        .HasForeignKey("RespostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pergunta");

                    b.Navigation("Resposta");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.AlunoEntity", b =>
                {
                    b.HasOne("Orienta.Domain.Entities.UsuarioEntity", null)
                        .WithOne()
                        .HasForeignKey("Orienta.Domain.Entities.AlunoEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Orienta.Domain.Entities.ProfessorEntity", b =>
                {
                    b.HasOne("Orienta.Domain.Entities.UsuarioEntity", null)
                        .WithOne()
                        .HasForeignKey("Orienta.Domain.Entities.ProfessorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Orienta.Domain.Entities.PerguntaEntity", b =>
                {
                    b.Navigation("Alternativas");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.QuestionarioEntity", b =>
                {
                    b.Navigation("Perguntas");
                });

            modelBuilder.Entity("Orienta.Domain.Entities.RespostaEntity", b =>
                {
                    b.Navigation("RespostasPerguntas");
                });
#pragma warning restore 612, 618
        }
    }
}
